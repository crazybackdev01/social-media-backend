# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# specify the version of docker-compose
version: "3.8"


services:
  api: 
    # api service depends on the db service so the db service will be started before the api service
    depends_on: 
      - db

    # specify the build context for the api service
    build: .
    
    # specify the ports to expose for the api service
    # the first number is the port on the host machine
    # the second number is the port inside the container
    ports: 
      - 5000:5000

    # specify environment variables for the api service
    # for demo purposes, we're using a local mongodb instance
    environment: 
      MONGODB_URL: mongodb+srv://udit:radhe123@social-media.okimv3p.mongodb.net/social?retryWrites=true&w=majority&appName=Social-media
    
    # establish docker compose watch mode for the api service
    develop:
      # specify the files to watch for changes
      watch:
        # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
        - path: ./package.json
          action: rebuild
        - path: ./package-lock.json
          action: rebuild
        
        # it'll watch for changes in the backend directory and sync the changes with the container real time
        - path: .
          target: /app
          action: sync


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

# version: "3.9"
# services:
#     web:
#         build:
#             context: .
#             dockerfile: Dockerfile
#         ports:
#             - "3000:3000"
#         environment:
#             MONGODB_ATLAS_PUBLIC_API_KEY: YOUR_PUBLIC_KEY_HERE
#             MONGODB_ATLAS_PRIVATE_API_KEY: YOUR_PRIVATE_KEY_HERE
#             MONGODB_ATLAS_ORG_ID: YOUR_ORG_ID_HERE
#             MONGODB_ATLAS_PROJECT_ID: YOUR_PROJECT_ID_HERE
#             MONGODB_CLUSTER_NAME: examples
#             MONGODB_USERNAME: demo
#             MONGODB_PASSWORD: password1234
#             # MONGODB_DATABASE: sample_mflix
#             # MONGODB_COLLECTION: movies
#             CLEANUP_ONDESTROY: true